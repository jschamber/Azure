{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name"
		},
		"linkedService2": {
			"type": "string"
		},
		"linkedService1": {
			"type": "string"
		},
		"AzureDataLakeStorage3": {
			"type": "string"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/ADF_SimplePatternCopydatafromMultiple_Tables_IntoLake')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Truncate Metadata Table",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[usp_TruncateTable]",
							"storedProcedureParameters": {
								"FullSchemaTableName": {
									"value": "[[dbo].[ADFWorkingTable]",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "[parameters('linkedService2')]",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Loop through each table listed in JSON Parameter",
						"description": "1) Source DB is SQL Query to determine the Years/Months/Number of Rows\n2) Sink to Metadata Table",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Truncate Metadata Table",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.TableList",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy Source Table details to Metadata",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "SELECT '@{item().table_name}' AS [table_name], '@{item().date_column}' AS [date_column], '@{item().file_name}' AS [file_name],\nYEAR(@{item().date_column}) AS [year_number] ,FORMAT(MONTH(@{item().date_column}), '00') AS [month_number], COUNT(1) AS [row_count]\n  FROM @{item().table_name}\n  WHERE YEAR(@{item().date_column}) is not null\n  GROUP BY YEAR(@{item().date_column}), MONTH(@{item().date_column})\n  ORDER BY YEAR(@{item().date_column}), MONTH(@{item().date_column})",
												"type": "Expression"
											}
										},
										"sink": {
											"type": "SqlServerSink",
											"sqlWriterStoredProcedureName": "[[dbo].[usp_upsert_ADFWorkingTable]",
											"sqlWriterTableType": "ADF_TableToFileWorkingTable_TableType",
											"storedProcedureTableTypeParameterName": "DataToLoad"
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "SqlServerTable1",
											"type": "DatasetReference"
										}
									],
									"outputs": [
										{
											"referenceName": "SqlServerTable2",
											"type": "DatasetReference"
										}
									]
								}
							]
						}
					},
					{
						"name": "Read Metadata table",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Loop through each table listed in JSON Parameter",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "SELECT [table_name]\n      ,[date_column]\n      ,[file_name]\n      ,[year_number]\n      ,[month_number]\n  FROM [dbo].[ADFWorkingTable]"
							},
							"dataset": {
								"referenceName": "SqlServerTable2",
								"type": "DatasetReference"
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Loop through each record in Metadata table",
						"description": "+ do a select * and copy into the Azure data Lake",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Read Metadata table",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Read Metadata table').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Select all rows from source and put in Azure data Lake",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "SELECT *\n  FROM @{item().table_name}\n WHERE MONTH(@{item().date_column}) = @{item().month_number} AND YEAR(@{item().date_column})  = @{item().year_number}",
												"type": "Expression"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "SqlServerTable1",
											"type": "DatasetReference"
										}
									],
									"outputs": [
										{
											"referenceName": "DelimitedText2",
											"type": "DatasetReference"
										}
									]
								}
							]
						}
					}
				],
				"parameters": {
					"TableList": {
						"type": "array"
					}
				},
				"variables": {
					"table": {
						"type": "Array"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SqlServerTable2')]",
				"[concat(variables('factoryId'), '/datasets/SqlServerTable1')]",
				"[concat(variables('factoryId'), '/datasets/DelimitedText2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SqlServerTable2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "[parameters('linkedService2')]",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SqlServerTable1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "[parameters('linkedService1')]",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DelimitedText2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "[parameters('AzureDataLakeStorage3')]",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@{item().file_name}.csv",
							"type": "Expression"
						},
						"folderPath": {
							"value": "test/@{item().year_number}./@{item().month_number}.",
							"type": "Expression"
						},
						"fileSystem": "simple"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": []
		}
	]
}